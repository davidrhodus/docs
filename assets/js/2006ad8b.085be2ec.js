"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[227],{694:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return r},metadata:function(){return m},toc:function(){return d}});var n=a(7462),i=a(3366),o=(a(7294),a(3905)),l=a(6213),s=["components"],r={id:"claim",title:"\ud83d\udcac Claim"},c=void 0,m={unversionedId:"sdk/workshop/claim",id:"sdk/workshop/claim",isDocsHomePage:!1,title:"\ud83d\udcac Claim",description:"In this section, you'll play the role of a claimer.",source:"@site/docs/sdk/1-workshop/06-claim.md",sourceDirName:"sdk/1-workshop",slug:"/sdk/workshop/claim",permalink:"/docs/sdk/workshop/claim",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/06-claim.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"claim",title:"\ud83d\udcac Claim"},sidebar:"sdk",previous:{title:"\ud83d\udca0 CTYPE",permalink:"/docs/sdk/workshop/ctype"},next:{title:"\ud83d\udd16 Attestation",permalink:"/docs/sdk/workshop/attestation"}},d=[{value:"Create a file",id:"create-a-file",children:[],level:2},{value:"Code: create a <code>Claim</code>",id:"code-create-a-claim",children:[],level:2},{value:"Code: create a <code>RequestForAttestation</code>",id:"code-create-a-requestforattestation",children:[],level:2},{value:"Run",id:"run",children:[],level:2}],p={toc:d};function u(e){var t=e.components,a=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this section, you'll play the role of a ",(0,o.kt)("span",{class:"label-role claimer"},"claimer"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You'll first make a claim about yourself in the form of a ",(0,o.kt)("inlineCode",{parentName:"li"},"Claim")," object;"),(0,o.kt)("li",{parentName:"ul"},"But a claim in itself has no value.\nTo become valid in the eyes of ",(0,o.kt)("span",{class:"label-role verifier"},"verifiers"),", it needs to be attested by an entity that ",(0,o.kt)("span",{class:"label-role verifier"},"verifiers")," trust: an ",(0,o.kt)("span",{class:"label-role attester"},"attester"),".\nSo you'll create a ",(0,o.kt)("inlineCode",{parentName:"li"},"RequestForAttestation")," object from your ",(0,o.kt)("inlineCode",{parentName:"li"},"Claim")," object, sign it with the DID, so that an ",(0,o.kt)("span",{class:"label-role attester"},"attester")," can attest it."),(0,o.kt)("li",{parentName:"ul"},"The claim will eventually be attested.")),(0,o.kt)("p",null,"We'll look into the attestation in the next steps - for now, let's just focus on your claim."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 KILT is an open system.\nAnyone/anything can make a claim about themselves. But a claim only has value if the verifier trusts the attester.")),(0,o.kt)("h2",{id:"create-a-file"},"Create a file"),(0,o.kt)("p",null,"Create a new file ",(0,o.kt)("inlineCode",{parentName:"p"},"claim.js"),".\nAll of the code for this step needs to go into this file."),(0,o.kt)("h2",{id:"code-create-a-claim"},"Code: create a ",(0,o.kt)("inlineCode",{parentName:"h2"},"Claim")),(0,o.kt)("p",null,"In the previous step, you've generated two mnemonics, DIDs and accounts.\nYou'll now need the first mnemonic you've created; it's referred to as ",(0,o.kt)("inlineCode",{parentName:"p"},"<claimerMnemonic>")," in the code snippet below."),(0,o.kt)("p",null,"We'll create a claim using the provided CTYPE and the ",(0,o.kt)("span",{class:"label-role claimer"},"claimer")," account.",(0,o.kt)("br",{parentName:"p"}),"\n","Paste the following in ",(0,o.kt)("inlineCode",{parentName:"p"},"claim.js"),"."),(0,o.kt)(l.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport function main(\n  claimerLightDid: Kilt.Did.LightDidDetails,\n  ctype: Kilt.CType\n): Kilt.Claim {\n  const claimContents = {\n    name: 'Alice',\n    age: 25,\n  }\n\n  const claim = Kilt.Claim.fromCTypeAndClaimContents(\n    ctype,\n    claimContents,\n    claimerLightDid.did\n  )\n\n  return claim\n}\n"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Don't run the code just yet!")," One more thing to add..."),(0,o.kt)("h2",{id:"code-create-a-requestforattestation"},"Code: create a ",(0,o.kt)("inlineCode",{parentName:"h2"},"RequestForAttestation")),(0,o.kt)("p",null,"Once your claim will be built, you will want to sign it and prepare it for the ",(0,o.kt)("span",{class:"label-role attester"},"attester"),".\nTo do so, let's build a ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestForAttestation")," object from your ",(0,o.kt)("inlineCode",{parentName:"p"},"Claim"),"."),(0,o.kt)("p",null,"Append the following code to your ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," function inside ",(0,o.kt)("inlineCode",{parentName:"p"},"claim.js"),":"),(0,o.kt)(l.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(\n  claimerLightDid: Kilt.Did.LightDidDetails,\n  claim: Kilt.Claim,\n  keystore: Kilt.Did.DemoKeystore\n): Promise<Kilt.RequestForAttestation> {\n  const requestForAttestation = Kilt.RequestForAttestation.fromClaim(claim)\n\n  await requestForAttestation.signWithDid(keystore, claimerLightDid)\n\n  // log this so you can paste it locally\n  console.log(\n    'requestForAttestationJSONString:\\n',\n    JSON.stringify(requestForAttestation)\n  )\n\n  return requestForAttestation\n}\n"),(0,o.kt)("h2",{id:"run"},"Run"),(0,o.kt)("p",null,"Run the code by running this command in your terminal, still within your ",(0,o.kt)("inlineCode",{parentName:"p"},"kilt-rocks")," directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node claim.js\n")),(0,o.kt)("p",null,"This outputs your ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestForAttestation")," object."),(0,o.kt)("p",null,"Copy and paste it somewhere: we'll need it in the next step to get it attested by an ",(0,o.kt)("span",{class:"label-role attester"},"attester"),"."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"let others attest your claim")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"In a real-life setup, the different actors - claimer, attester and verifier - communicate with each other via a messaging system and can rely on the KILT SDK's messaging capabilities."),(0,o.kt)("p",{parentName:"div"},"We don't need to do this here."),(0,o.kt)("p",{parentName:"div"},"If you're following this tutorial on your own, you're playing all three KILT roles: claimer, attester and verifier. So you can simply copy the outputs of the different functions you're calling and use them as inputs for the other actors."),(0,o.kt)("p",{parentName:"div"},"If you're following this as a workshop, you can simulate message exchange by exchanging your requests via chat, email, or simply by pasting requests for attestations or credentials in a shared document such as ",(0,o.kt)("a",{parentName:"p",href:"https://hackmd.io/c6OBNgWWR8yWJhMj7WICUA?edit"},"this hackmd"),"."))),(0,o.kt)("p",null,"OK, you've made a claim as a ",(0,o.kt)("span",{class:"label-role claimer"},"claimer")," and created a request for attestation."),(0,o.kt)("p",null,"Let's switch roles and get this attested!"))}u.isMDXComponent=!0}}]);