"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[82],{9604:function(t,e,n){n.r(e),n.d(e,{contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return r},metadata:function(){return c},toc:function(){return u}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),s=n(6213),l=["components"],r={id:"attestation",title:"\ud83d\udd16 Attestation"},d=void 0,c={unversionedId:"sdk/workshop/attestation",id:"sdk/workshop/attestation",isDocsHomePage:!1,title:"\ud83d\udd16 Attestation",description:"In this section, you'll play the role of the attester:",source:"@site/docs/sdk/1-workshop/07-attestation.md",sourceDirName:"sdk/1-workshop",slug:"/sdk/workshop/attestation",permalink:"/docs/sdk/workshop/attestation",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/07-attestation.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"attestation",title:"\ud83d\udd16 Attestation"},sidebar:"sdk",previous:{title:"\ud83d\udcac Claim",permalink:"/docs/sdk/workshop/claim"},next:{title:"\ud83d\udd10 Verify a Claim",permalink:"/docs/sdk/workshop/verification"}},u=[{value:"Request KILT tokens",id:"request-kilt-tokens",children:[],level:2},{value:"Create a file",id:"create-a-file",children:[],level:2},{value:"Code: validate the <code>RequestForAttestation</code> object",id:"code-validate-the-requestforattestation-object",children:[],level:2},{value:"Code: create an <code>Attestation</code>",id:"code-create-an-attestation",children:[],level:2},{value:"Run",id:"run",children:[],level:2}],p={toc:u};function k(t){var e=t.components,n=(0,o.Z)(t,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this section, you'll play the role of the ",(0,i.kt)("span",{class:"label-role attester"},"attester"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You'll take a ",(0,i.kt)("inlineCode",{parentName:"li"},"RequestForAttestation")," object;"),(0,i.kt)("li",{parentName:"ul"},"Attest it;"),(0,i.kt)("li",{parentName:"ul"},"Store the attestation on the chain (more specifically only its hash, we'll get to that);"),(0,i.kt)("li",{parentName:"ul"},"Build the ",(0,i.kt)("inlineCode",{parentName:"li"},"Credential")," object which will be send back to the ",(0,i.kt)("span",{class:"label-role claimer"},"claimer"),".")),(0,i.kt)("h2",{id:"request-kilt-tokens"},"Request KILT tokens"),(0,i.kt)("p",null,"When writing the hash of attestations on the blockchain, ",(0,i.kt)("span",{class:"label-role attester"},"attesters")," have to pay the angel\u2019s\nshare (gas or transaction fee) and the deposit in KILT Tokens. So you'll need tokens to attest a claim."),(0,i.kt)("p",null,"If you haven't already requested KILT tokens, go to the (",(0,i.kt)("a",{parentName:"p",href:"https://matrix.to/#/%23kilt-general:matrix.org"},"element")," and ",(0,i.kt)("a",{parentName:"p",href:"https://discord.gg/hX4pc8rdHS"},"discord"),") and request tokens for your ",(0,i.kt)("inlineCode",{parentName:"p"},"<attesterAddress>"),"."),(0,i.kt)("p",null,"Sadly these are just play tokens, not real money."),(0,i.kt)("h2",{id:"create-a-file"},"Create a file"),(0,i.kt)("p",null,"Create a new file ",(0,i.kt)("inlineCode",{parentName:"p"},"attestation.js"),".\nAll of the code for this step needs to go into this file."),(0,i.kt)("h2",{id:"code-validate-the-requestforattestation-object"},"Code: validate the ",(0,i.kt)("inlineCode",{parentName:"h2"},"RequestForAttestation")," object"),(0,i.kt)("p",null,"In a real-life setup, as an ",(0,i.kt)("span",{class:"label-role attester"},"attester")," you would directly receive a ",(0,i.kt)("inlineCode",{parentName:"p"},"RequestForAttestation")," from a ",(0,i.kt)("span",{class:"label-role claimer"},"claimer"),"."),(0,i.kt)("p",null,"In this tutorial, you can either:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Take the ",(0,i.kt)("inlineCode",{parentName:"li"},"RequestForAttestation")," object you've generated in the previous step as a ",(0,i.kt)("span",{class:"label-role claimer"},"claimer"),";"),(0,i.kt)("li",{parentName:"ul"},"Or if you're in a workshop, ask another participant to send you their ",(0,i.kt)("inlineCode",{parentName:"li"},"RequestForAttestation")," object.")),(0,i.kt)("p",null,"In the following, we'll refer to it as ",(0,i.kt)("inlineCode",{parentName:"p"},"<requestForAttestationJSONString>"),"."),(0,i.kt)("p",null,"Paste the following code in ",(0,i.kt)("inlineCode",{parentName:"p"},"attestation.js")," (make sure to replace ",(0,i.kt)("inlineCode",{parentName:"p"},"<attesterMnemonic>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<attestersFullDid>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<attestersAccount>")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"<requestForAttestationJSONString>")," with the relevant objects):"),(0,i.kt)(s.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport function main(encodedRequestForAttestation: string) {\n  const requestForAttestationStruct = JSON.parse(encodedRequestForAttestation)\n\n  return Kilt.RequestForAttestation.fromRequest(requestForAttestationStruct)\n}\n"),(0,i.kt)("p",null,"To check if the object is valid, you can check the data against the CTYPE\nand check if the signature is valid."),(0,i.kt)(s.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(\n  requestForAttestation: Kilt.RequestForAttestation\n): Promise<boolean> {\n  await Kilt.connect()\n\n  const isDataValid = requestForAttestation.verifyData()\n  const isSignatureValid = await requestForAttestation.verifySignature()\n  console.log('isDataValid: ', isDataValid)\n  console.log('isSignatureValid: ', isSignatureValid)\n\n  await Kilt.disconnect()\n\n  return isDataValid && isSignatureValid\n}\n"),(0,i.kt)("h2",{id:"code-create-an-attestation"},"Code: create an ",(0,i.kt)("inlineCode",{parentName:"h2"},"Attestation")),(0,i.kt)("p",null,"Now is time to interact with the chain, in order to store an attestation on there.",(0,i.kt)("br",{parentName:"p"}),"\n","Append the following code to your ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," function inside ",(0,i.kt)("inlineCode",{parentName:"p"},"attestation.js"),"."),(0,i.kt)(s.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(\n  attester: Kilt.KeyringPair,\n  attesterFullDid: Kilt.Did.FullDidDetails,\n  requestForAttestation: Kilt.RequestForAttestation,\n  keystore: Kilt.Did.DemoKeystore\n): Promise<Kilt.Credential> {\n  await Kilt.connect()\n\n  // build the attestation object\n  const attestation = Kilt.Attestation.fromRequestAndDid(\n    requestForAttestation,\n    attesterFullDid.did\n  )\n\n  // store the attestation on chain\n  const tx = await attestation.store()\n  const authorizedTx = await attesterFullDid.authorizeExtrinsic(\n    tx,\n    keystore,\n    attester.address\n  )\n  await Kilt.BlockchainUtils.signAndSubmitTx(authorizedTx, attester, {\n    resolveOn: Kilt.BlockchainUtils.IS_FINALIZED,\n  })\n  console.log('Attestation saved on chain.')\n\n  // the attestation was successfully stored on the chain, so you can now create the credential object\n  const credential = Kilt.Credential.fromRequestAndAttestation(\n    requestForAttestation,\n    attestation\n  )\n  // log the Credential so you can copy/send it back to the claimer\n  console.log('CredentialJSONString:\\n', JSON.stringify(credential))\n\n  // disconnect from the chain\n  await Kilt.disconnect()\n  console.log('Disconnected from KILT testnet')\n  return credential\n}\n"),(0,i.kt)("h2",{id:"run"},"Run"),(0,i.kt)("p",null,"Run the code by running this command in your terminal, still within your ",(0,i.kt)("inlineCode",{parentName:"p"},"kilt-rocks")," directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node attestation.js\n")),(0,i.kt)("p",null,"You should see in your logs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"true")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if the signature and data are valid (they should be);"),(0,i.kt)("li",{parentName:"ul"},"The block hash in which the transaction was finalized;"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"Credential")," object.")),(0,i.kt)("p",null,"Copy the ",(0,i.kt)("inlineCode",{parentName:"p"},"Credential")," object, you'll need it soon."),(0,i.kt)("p",null,"Your job as an ",(0,i.kt)("span",{class:"label-role attester"},"attester")," is done: you've successfully attested a claim, written the attestation hash onto the chain, and prepared the ",(0,i.kt)("inlineCode",{parentName:"p"},"Credential")," object for the ",(0,i.kt)("span",{class:"label-role claimer"},"claimer"),"."))}k.isMDXComponent=!0}}]);