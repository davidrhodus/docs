"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[60],{8577:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=n(6213),o=["components"],s={id:"verification-authenticity",title:"\ud83e\udd78 Verify the authenticity"},c=void 0,d={unversionedId:"sdk/workshop/verification-authenticity",id:"sdk/workshop/verification-authenticity",isDocsHomePage:!1,title:"\ud83e\udd78 Verify the authenticity",description:"Did you notice anything wrong with our verification in the previous step?",source:"@site/docs/sdk/1-workshop/09-verification-authenticity.md",sourceDirName:"sdk/1-workshop",slug:"/sdk/workshop/verification-authenticity",permalink:"/docs/sdk/workshop/verification-authenticity",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/09-verification-authenticity.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{id:"verification-authenticity",title:"\ud83e\udd78 Verify the authenticity"},sidebar:"sdk",previous:{title:"\ud83d\udd10 Verify a Claim",permalink:"/docs/sdk/workshop/verification"},next:{title:"\u2728 Done",permalink:"/docs/sdk/workshop/done"}},p=[{value:"Understand credential theft mitigation",id:"understand-credential-theft-mitigation",children:[],level:2},{value:'As the <span class="label-role verifier">verifier</span>: create a nonce',id:"as-the-verifier-create-a-nonce",children:[],level:2},{value:'As the <span class="label-role claimer">claimer</span>: create the presentation, which will sign with the challenge and prepare the data',id:"as-the-claimer-create-the-presentation-which-will-sign-with-the-challenge-and-prepare-the-data",children:[],level:2},{value:'As the <span class="label-role verifier">verifier</span>: verify the <code>presentation</code> and <code>credential</code>',id:"as-the-verifier-verify-the-presentation-and-credential",children:[],level:2}],h={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Did you notice anything wrong with our verification in the previous step?"),(0,r.kt)("p",null,"Nothing? Let's see:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You've checked that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential")," data is valid and you've verified that the corresponding attestation is on chain and not revoked. All good.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"But: are you sure that the entity/person that sent you the ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential")," owns it?\nWhat if a malicious actor stole this ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential")," and is now presenting it to you as theirs? We'll see how to mitigate this."))),(0,r.kt)("h2",{id:"understand-credential-theft-mitigation"},"Understand credential theft mitigation"),(0,r.kt)("p",null,"To mitigate credential theft, a ",(0,r.kt)("span",{class:"label-role verifier"},"verifier")," can initiate a ",(0,r.kt)("strong",{parentName:"p"},"cryptographic challenge")," with a ",(0,r.kt)("span",{class:"label-role claimer"},"claimer"),"."),(0,r.kt)("p",null,"The underlying idea is simple: to prove their DID, the ",(0,r.kt)("span",{class:"label-role claimer"},"claimer")," signs ",(0,r.kt)("strong",{parentName:"p"},"on-the-fly")," - that's important - a piece of data under the same DID as the DID associated with their ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential"),". By checking this signature's validity, the ",(0,r.kt)("span",{class:"label-role verifier"},"verifier")," makes sure that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Credential")," is owned by the person who just sent it."),(0,r.kt)("p",null,"What piece of data should be signed? It doesn't really matter; it can be an arbitrary number picked by the ",(0,r.kt)("span",{class:"label-role verifier"},"verifier"),". What matters is that this number should be used only once. Otherwise, the cryptographic challenge is worthless."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Nonce")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In a cryptographic communication, an arbitrary number that can be used just once is called a ",(0,r.kt)("strong",{parentName:"p"},"nonce"),"."))),(0,r.kt)("p",null,"Here's how it works:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("span",{class:"label-role verifier"},"verifier")," sends a nonce to the ",(0,r.kt)("span",{class:"label-role claimer"},"claimer")," as a challenge."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("span",{class:"label-role claimer"},"claimer")," sends back a presentation of the credential with the nonce signed with their ",(0,r.kt)("strong",{parentName:"li"},"encryption")," key."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("span",{class:"label-role verifier"},"verifier")," checks the following:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Does the signature on the nonce match the public key contained in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Credential"),"? If so: the entity/person who just sent the ",(0,r.kt)("inlineCode",{parentName:"li"},"Credential")," plus the signed nonce is also the owner of this ",(0,r.kt)("inlineCode",{parentName:"li"},"Credential"),". If not: the ",(0,r.kt)("inlineCode",{parentName:"li"},"Credential")," might be stolen."),(0,r.kt)("li",{parentName:"ul"},"Is the data valid? Is the attestation on-chain and not revoked? See the simple ",(0,r.kt)("a",{parentName:"li",href:"verification"},"Verification")," for more information about the validation logic.")))),(0,r.kt)("p",null,"OK, let's see this in action."),(0,r.kt)("h2",{id:"as-the-verifier-create-a-nonce"},"As the ",(0,r.kt)("span",{class:"label-role verifier"},"verifier"),": create a nonce"),(0,r.kt)("p",null,"To generate a random, unique piece of data, we'll use the Kilt SDK to generate secure nonces starting from a randomly generated ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/uuid"},"UUID"),".\nThe most important properties of nonces are ",(0,r.kt)("strong",{parentName:"p"},"randomness")," and ",(0,r.kt)("strong",{parentName:"p"},"uniqueness"),"."),(0,r.kt)("p",null,"Create a new file ",(0,r.kt)("inlineCode",{parentName:"p"},"nonce.js"),", and paste the following code into it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const Kilt = require('@kiltprotocol/sdk-js')\n\nconst nonce = Kilt.Utils.UUID.generate()\nconsole.log('Nonce: ', nonce)\n")),(0,r.kt)("p",null,"Run the code by running this command in your terminal, still within your ",(0,r.kt)("inlineCode",{parentName:"p"},"kilt-rocks")," directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node nonce.js\n")),(0,r.kt)("p",null,"You should see in your logs the resulting HEX string that will be used as a nonce; it should look something like this: ",(0,r.kt)("inlineCode",{parentName:"p"},"0x942ab89b01671faeec84a76f4a8eae9b57ec12bf06157f8a87315cd29a5e0d25"),"."),(0,r.kt)("p",null,"Copy it, you'll need it in the next step."),(0,r.kt)("h2",{id:"as-the-claimer-create-the-presentation-which-will-sign-with-the-challenge-and-prepare-the-data"},"As the ",(0,r.kt)("span",{class:"label-role claimer"},"claimer"),": create the presentation, which will sign with the challenge and prepare the data"),(0,r.kt)("p",null,"Let's put together the data you would send back to the ",(0,r.kt)("span",{class:"label-role verifier"},"verifier"),", as the ",(0,r.kt)("span",{class:"label-role claimer"},"claimer"),"."),(0,r.kt)("p",null,"Create a new file ",(0,r.kt)("inlineCode",{parentName:"p"},"create-presentation.js"),"."),(0,r.kt)("p",null,"Paste the following code into it (make sure to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"<nonce>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"<credentialJSONString>")," with the data you copied earlier):"),(0,r.kt)(l.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(\n  claimerLightDid: Kilt.Did.LightDidDetails,\n  credential: Kilt.Credential,\n  nonce: string,\n  keystore: Kilt.Did.DemoKeystore\n): Promise<Kilt.Credential> {\n  // sign the nonce as the claimer with the claimer's DID\n  const presentation = await credential.createPresentation({\n    signer: keystore,\n    claimerDid: claimerLightDid,\n    challenge: nonce,\n  })\n\n  // this is the message to send to the verifier\n  const dataToVerify = {\n    presentation,\n    nonce,\n  }\n\n  console.log('KILT Credential:\\n', presentation.request.claim)\n\n  console.log(\n    'dataToVerifyJSONString:\\n',\n    JSON.stringify(dataToVerify, undefined, 2)\n  )\n  return presentation\n}\n"),(0,r.kt)("p",null,"Run the code by running this command in your terminal, still within your ",(0,r.kt)("inlineCode",{parentName:"p"},"kilt-rocks")," directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node create-presentation.js\n")),(0,r.kt)("p",null,"You should see in your logs the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataToVerifyJSONString"),", which is a string representation of the data to verify."),(0,r.kt)("p",null,"Copy it, you'll need it in the next step."),(0,r.kt)("h2",{id:"as-the-verifier-verify-the-presentation-and-credential"},"As the ",(0,r.kt)("span",{class:"label-role verifier"},"verifier"),": verify the ",(0,r.kt)("inlineCode",{parentName:"h2"},"presentation")," and ",(0,r.kt)("inlineCode",{parentName:"h2"},"credential")),(0,r.kt)("p",null,"Create a new file ",(0,r.kt)("inlineCode",{parentName:"p"},"verification-of-presentation.js"),"."),(0,r.kt)("p",null,"Paste the following code into it (make sure to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"<dataToVerifyJSONString>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"<nonce>")," with the values obtained in the previous steps):"),(0,r.kt)(l.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(\n  presentation: Kilt.Credential,\n  nonce: string,\n  keystore: Kilt.Did.DemoKeystore\n) {\n  await Kilt.connect()\n  // verify the presentation from the nonce (<nonce> is the uuid you've generated as the verifier)\n  const isSenderOwner = await Kilt.Credential.verify(presentation, {\n    challenge: nonce,\n  })\n  console.log('isSenderOwner: ', isSenderOwner)\n\n  // proceed with verifying the credential itself\n  // --\x3e see simple \"Verification\" step in this tutorial\n\n  // disconnect from the chain\n  await Kilt.disconnect()\n  return isSenderOwner\n}\n"),(0,r.kt)("p",null,"Run the code by running this command in your terminal, still within your ",(0,r.kt)("inlineCode",{parentName:"p"},"kilt-rocks")," directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node verification-of-presentation.js\n")),(0,r.kt)("p",null,"You should see in your logs that ",(0,r.kt)("inlineCode",{parentName:"p"},"isSenderOwner")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),": this means that the claimer presenting the ",(0,r.kt)("inlineCode",{parentName:"p"},"credential")," is the same that owns it, so it has not been stolen or compromised."),(0,r.kt)("p",null,"Looking good!"),(0,r.kt)("p",null,"You can also see what would happen when a malicious actor presents a stolen ",(0,r.kt)("inlineCode",{parentName:"p"},"credential")," to a ",(0,r.kt)("span",{class:"label-role verifier"},"verifier"),". Try this out:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create another account and light DID, let's refer to it as Mallory (= malicious);"),(0,r.kt)("li",{parentName:"ul"},"Sign the presentation above with Mallory's light DID, hence creating a new ",(0,r.kt)("inlineCode",{parentName:"li"},"presentation"),";"),(0,r.kt)("li",{parentName:"ul"},"Create a new ",(0,r.kt)("inlineCode",{parentName:"li"},"invalidDataToVerify")," object with this new ",(0,r.kt)("inlineCode",{parentName:"li"},"presentation")," and with Alice's ",(0,r.kt)("inlineCode",{parentName:"li"},"credential")," we've been using so far;"),(0,r.kt)("li",{parentName:"ul"},"As a ",(0,r.kt)("span",{class:"label-role verifier"},"verifier"),", verify the ",(0,r.kt)("inlineCode",{parentName:"li"},"presentation")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"invalidDataToVerify")," via ",(0,r.kt)("inlineCode",{parentName:"li"},"Kilt.Credential.verify"),";"),(0,r.kt)("li",{parentName:"ul"},"You'll see that this verification will return ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),": the ",(0,r.kt)("span",{class:"label-role verifier"},"verifier")," will know that this credential is not owned by Mallory.")))}m.isMDXComponent=!0}}]);