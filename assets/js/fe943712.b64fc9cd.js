"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[509],{7430:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return d}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),s=t(6213),r=["components"],c={id:"account",title:"\ud83d\udc64 Account"},l=void 0,m={unversionedId:"sdk/workshop/account",id:"sdk/workshop/account",isDocsHomePage:!1,title:"\ud83d\udc64 Account",description:"Let's create the claimer and the attester account.",source:"@site/docs/sdk/1-workshop/03-account.md",sourceDirName:"sdk/1-workshop",slug:"/sdk/workshop/account",permalink:"/docs/sdk/workshop/account",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/03-account.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"account",title:"\ud83d\udc64 Account"},sidebar:"sdk",previous:{title:"\ud83d\udc53 Overview",permalink:"/docs/sdk/workshop/overview"},next:{title:"\ud83d\udc64 Did",permalink:"/docs/sdk/workshop/did"}},d=[{value:"Create a file",id:"create-a-file",children:[],level:2},{value:"Code",id:"code",children:[],level:2},{value:"Run",id:"run",children:[],level:2}],p={toc:d};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Let's create the ",(0,i.kt)("span",{class:"label-role claimer"},"claimer")," and the ",(0,i.kt)("span",{class:"label-role attester"},"attester")," account."),(0,i.kt)("p",null,"In KILT, there is an account which is an object that interacts with the blockchain."),(0,i.kt)("p",null,"An accounts contains multiple properties.",(0,i.kt)("br",{parentName:"p"}),"\n","One of them is the ",(0,i.kt)("inlineCode",{parentName:"p"},"address")," : it's the entity's unique and public on-chain identifier."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"KILT Account")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"A KILT account is a set of cryptographic elements:"),(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"The address, which is generated from the public key"),(0,i.kt)("li",{parentName:"ul"},"A signing keypair write transactions on-chain")))),(0,i.kt)("p",null,"All we need to create an account is a mnemonic."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"mnemonic")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"In cryptography, a mnemonic usually consists of 12 or 24 random series of words.\nFor example, ",(0,i.kt)("inlineCode",{parentName:"p"},"gold upset segment cake universe")," is a mnemonic.\nIt's used to generate signing keypairs.\nWhat's great about a mnemonic is that it's ",(0,i.kt)("strong",{parentName:"p"},"human-readable"),".\nA person can memorize it, and use it later to re-generate their keypairs and address."))),(0,i.kt)("h2",{id:"create-a-file"},"Create a file"),(0,i.kt)("p",null,"Create a new file ",(0,i.kt)("inlineCode",{parentName:"p"},"account.js"),".\nAll of the code for this step needs to go into this file."),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)("p",null,"To generate an account, one method from the KILT SDK is needed and one method from the polkadot crypto utility:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mnemonicGenerate()")," // Generates a mnemonic"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"buildFromMnemonic(mnemonic)")," // takes a mnemonic as an input, and outputs an ",(0,i.kt)("inlineCode",{parentName:"li"},"Account")," instance.")),(0,i.kt)("p",null,"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"account.js")," and paste the following code:"),(0,i.kt)(s.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { mnemonicGenerate } from '@polkadot/util-crypto'\n\nexport function main() {\n  const mnemonic = mnemonicGenerate()\n  console.log('mnemonic:', mnemonic)\n\n  const keyring = new Kilt.Utils.Keyring({\n    ss58Format: 38,\n    type: 'ed25519',\n  })\n  const account = keyring.addFromMnemonic(mnemonic)\n  console.log('address:', account.address)\n}\n"),(0,i.kt)("p",null,"You're now ready to generate an account."),(0,i.kt)("h2",{id:"run"},"Run"),(0,i.kt)("p",null,"To generate an account, run this command in your terminal, still within your ",(0,i.kt)("inlineCode",{parentName:"p"},"kilt-rocks")," directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node account.js\n")),(0,i.kt)("p",null,"Your output should look like this (but it won't be identical since the mnemonic is randomly generated):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Mnemonic: gold upset segment cake universe carry demand comfort dawn invite element capital\nAddress: 5CUoo2vAegeaZHPNdxZyuMesR3RWYBKHj4jfVyj4FXzpXPuR\n")),(0,i.kt)("p",null,"You want to run this command twice, in order to generate 2 accounts:\nthe ",(0,i.kt)("span",{class:"label-role attester"},"attester"),"'s and the ",(0,i.kt)("span",{class:"label-role claimer"},"claimer"),"'s.\nHence, replace the content of ",(0,i.kt)("inlineCode",{parentName:"p"},"account.js")," with the following code:"),(0,i.kt)(s.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { mnemonicGenerate } from '@polkadot/util-crypto'\n\nexport function main() {\n  const keyring = new Kilt.Utils.Keyring({\n    ss58Format: 38,\n    type: 'ed25519',\n  })\n  const claimerMnemonic = mnemonicGenerate()\n  console.log('claimer mnemonic:', claimerMnemonic)\n  const claimer = keyring.addFromMnemonic(claimerMnemonic)\n  console.log('claimer address:', claimer.address)\n\n  const attesterMnemonic = mnemonicGenerate()\n  console.log('attester mnemonic:', attesterMnemonic)\n  const attester = keyring.addFromMnemonic(attesterMnemonic)\n  console.log('attester address:', attester.address)\n  return { claimer, attester, attesterMnemonic }\n}\n"),(0,i.kt)("p",null,"Copy and paste the two mnemonics and addresses somewhere, you'll need them soon."),(0,i.kt)("p",null,"In the next steps, we'll refer to the so-generated accounts as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<claimerMnemonic>")," is the mnemonic for the claimer and ",(0,i.kt)("inlineCode",{parentName:"li"},"<claimerAddress>")," the claimer's associated address;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<attesterMnemonic>")," is the mnemonic for the attester and ",(0,i.kt)("inlineCode",{parentName:"li"},"<attesterAddress>")," the attester's associated address.")),(0,i.kt)("p",null,"That's it - You've successfully generated two new on-chain accounts and their associated addresses!"))}u.isMDXComponent=!0}}]);