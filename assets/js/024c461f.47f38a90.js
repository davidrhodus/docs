"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[313],{2898:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return m}});var n=a(7462),o=a(3366),i=(a(7294),a(3905)),r=a(6213),l='{\n  "schema": {\n    "$id": "kilt:ctype:0xd8ad043d91d8fdbc382ee0ce33dc96af4ee62ab2d20f7980c49d3e577d80e5f5",\n    "$schema": "http://kilt-protocol.org/draft-01/ctype#",\n    "title": "Drivers License",\n    "properties": {\n      "name": {\n        "type": "string"\n      },\n      "age": {\n        "type": "integer"\n      }\n    },\n    "type": "object"\n  },\n  "owner": "5DD7fAZKSpgctg1ZQigAYuk3ypBtr2Q9RPKJBx5UpUwQw4vB",\n  "hash": "0xd8ad043d91d8fdbc382ee0ce33dc96af4ee62ab2d20f7980c49d3e577d80e5f5"\n}\n',s=["components"],d={id:"ctype",title:"\ud83d\udca0 CTYPE"},p=void 0,c={unversionedId:"sdk/workshop/ctype",id:"sdk/workshop/ctype",isDocsHomePage:!1,title:"\ud83d\udca0 CTYPE",description:"Before the claimer can make a claim about themselves, first a claim type (CType for short) needs to be found or created.",source:"@site/docs/sdk/1-workshop/05-ctype.md",sourceDirName:"sdk/1-workshop",slug:"/sdk/workshop/ctype",permalink:"/docs/sdk/workshop/ctype",editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/sdk/1-workshop/05-ctype.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"ctype",title:"\ud83d\udca0 CTYPE"},sidebar:"sdk",previous:{title:"\ud83d\udc64 Did",permalink:"/docs/sdk/workshop/did"},next:{title:"\ud83d\udcac Claim",permalink:"/docs/sdk/workshop/claim"}},m=[{value:"Code",id:"code",children:[],level:2}],h={toc:m};function k(e){var t=e.components,a=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Before the ",(0,i.kt)("span",{class:"label-role claimer"},"claimer")," can make a claim about themselves, first a claim type (CType for short) needs to be found or created.\nIt requires an account and a full DID with tokens in order to pay the Angel's fee and deposit of a CType."),(0,i.kt)("p",null,"A claim type (CTYPE for short) is a KILT-specific term, but the concept is simple:",(0,i.kt)("br",{parentName:"p"}),"\n","A CTYPE defines the structure of a claim. You can think of it as the data model for your claim."),(0,i.kt)("p",null,"For example, a very basic CTYPE for a driver's license could look like this:"),(0,i.kt)(r.Z,{className:"language-json",mdxType:"CodeBlock"},l),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"CType")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"CTYPEs are based on JSON Schema, a standard used to annotate and validate JSON documents.\nA schema defines which properties exist and what their type should be, i.e. is it a ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", a ",(0,i.kt)("inlineCode",{parentName:"p"},"number"),", an ",(0,i.kt)("inlineCode",{parentName:"p"},"object"),", etc."),(0,i.kt)("p",{parentName:"div"},"When you create a CType from a schema, it is checked whether your CType aligns with the underlying schema.\nThink of checking whether a cook (user) followed a certain recipe (schema) when preparing a meal (creating a CType)."),(0,i.kt)("p",{parentName:"div"},"We don't need to dive into it in this tutorial, for now we can think of CTYPE as JSON objects."))),(0,i.kt)("p",null,"Let's have a look at these attributes."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"schema")," > ",(0,i.kt)("inlineCode",{parentName:"td"},"$id")),(0,i.kt)("td",{parentName:"tr",align:null},"The KILT id of this CTYPE.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"schema")," > ",(0,i.kt)("inlineCode",{parentName:"td"},"$schema")),(0,i.kt)("td",{parentName:"tr",align:null},"The JSON schema on which the CTYPE is based.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"schema")," > ",(0,i.kt)("inlineCode",{parentName:"td"},"title")),(0,i.kt)("td",{parentName:"tr",align:null},"The title of the CTYPE.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"schema")," > ",(0,i.kt)("inlineCode",{parentName:"td"},"properties")),(0,i.kt)("td",{parentName:"tr",align:null},"The properties that a claim of type in ",(0,i.kt)("inlineCode",{parentName:"td"},"$schema")," should have.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"owner")),(0,i.kt)("td",{parentName:"tr",align:null},"The public address of the user who created this CTYPE.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"hash")),(0,i.kt)("td",{parentName:"tr",align:null},"Most important attribute, the hash is the CTYPE's ",(0,i.kt)("strong",{parentName:"td"},"digital footprint"),".")))),(0,i.kt)("p",null,"A CTYPE is stored on the KILT blockchain."),(0,i.kt)("p",null,"In a real-life setup, a user would simply retrieve an existing CTYPE from the chain or a repository of CTYPEs for example via a REST API."),(0,i.kt)("p",null,"In this tutorial, we'll create and try to store a CTYPE on the KILT test blockchain."),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)("p",null,"Create a new file ",(0,i.kt)("inlineCode",{parentName:"p"},"ctype.js")),(0,i.kt)("p",null,"Copy the following to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"CType")," from a schema:"),(0,i.kt)(r.Z,{className:"language-ts",mdxType:"CodeBlock"},l),(0,i.kt)("p",null,"Once you have constructed the schema, pass the attester, attestersFullDid, keystore and ctype."),(0,i.kt)("p",null,"Creating a new file ",(0,i.kt)("inlineCode",{parentName:"p"},"storedCtype.js")),(0,i.kt)("p",null,"Copy the following to store the ",(0,i.kt)("inlineCode",{parentName:"p"},"CType")," on-chain, an account must have the require amount to pay the Angel's fee and deposit:"),(0,i.kt)(r.Z,{className:"language-ts",mdxType:"CodeBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport function main(): Kilt.CType {\n  return Kilt.CType.fromSchema({\n    $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n    title: 'Drivers License',\n    properties: {\n      name: {\n        type: 'string',\n      },\n      age: {\n        type: 'integer',\n      },\n    },\n    type: 'object',\n  })\n}\n"),(0,i.kt)("p",null,"Create a new file ",(0,i.kt)("inlineCode",{parentName:"p"},"ctype.json")," and store the ctype."),(0,i.kt)("p",null,"OK, now you've got all you need to create a claim: a light DID and a CTYPE."),(0,i.kt)("p",null,"Let's move on!"))}k.isMDXComponent=!0}}]);